{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documentos/albernazandre.github.io/sd-028-a-project-trybetunes/src/components/FavoriteSongs.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass FavoriteSongs extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      favSong: false,\n      loading: false\n    };\n    this.myFavSong = async () => {\n      const {\n        trackInfo: {\n          trackId\n        }\n      } = this.props; // acessando trackId\n      const musics = await getFavoriteSongs(); // musics advem da funcao que captura as musicas favoritas\n      const favSong = musics ? musics // se houver musicas favoritas (funcao retornar), pegue aquelas com id identico\n      .some(song => song.trackId === trackId) : false; // senao, retorne false\n      this.setState({\n        favSong\n      }); // valor sera colocado na key favSong\n      return favSong;\n    };\n    this.validateFav = async favSong => {\n      const {\n        trackInfo\n      } = this.props; // acessando trackInfo da props\n      const addRemove = favSong ? removeSong : addSong; // caso haja parametro, remova musica\n      this.setState({\n        loading: true\n      }); // carregar pagina\n      await addRemove(trackInfo); // remove info da musica anteriormente passada\n      this.setState({\n        loading: false,\n        favSong: !favSong\n      }); // ao final pare de carregar e favSong fica vazia\n    };\n  }\n  componentDidMount() {\n    // faz com que a funcao seja rodada apos o render\n    this.myFavSong();\n  }\n\n  // myFavSong seta a key favSong do state para true ou false apos comparar se musicas favoritadas\n  // tem id's identicos aos das musicas no props obj\n\n  render() {\n    const {\n      trackInfo: {\n        trackId\n      }\n    } = this.props; // acessando trackId\n    const {\n      favSong,\n      loading\n    } = this.state; // acessando as keys do state\n    return loading ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: trackId,\n      children: [\"Favorita\", /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-testid\": `checkbox-music-${trackId}`,\n        type: \"checkbox\",\n        name: \"favSong\",\n        id: trackId,\n        checked: favSong,\n        onChange: () => this.validateFav(favSong)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this);\n  }\n}\nFavoriteSongs.propTypes = {\n  trackInfo: PropTypes.shape({\n    trackId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired // tipo string e number\n  }).isRequired\n};\nexport default FavoriteSongs;\n// finish","map":{"version":3,"names":["React","PropTypes","addSong","getFavoriteSongs","removeSong","FavoriteSongs","Component","state","favSong","loading","myFavSong","trackInfo","trackId","props","musics","some","song","setState","validateFav","addRemove","componentDidMount","render","propTypes","shape","oneOfType","string","number","isRequired"],"sources":["/home/andre/Documentos/albernazandre.github.io/sd-028-a-project-trybetunes/src/components/FavoriteSongs.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, getFavoriteSongs, removeSong } from '../services/favoriteSongsAPI';\n\nclass FavoriteSongs extends React.Component {\n  state = {\n    favSong: false,\n    loading: false,\n  };\n\n  componentDidMount() { // faz com que a funcao seja rodada apos o render\n    this.myFavSong();\n  }\n\n  // myFavSong seta a key favSong do state para true ou false apos comparar se musicas favoritadas\n  // tem id's identicos aos das musicas no props obj\n  myFavSong = async () => {\n    const { trackInfo: { trackId } } = this.props; // acessando trackId\n    const musics = await getFavoriteSongs(); // musics advem da funcao que captura as musicas favoritas\n    const favSong = musics ? musics // se houver musicas favoritas (funcao retornar), pegue aquelas com id identico\n      .some((song) => song.trackId === trackId) : false; // senao, retorne false\n    this.setState({ favSong }); // valor sera colocado na key favSong\n    return favSong;\n  };\n\n  validateFav = async (favSong) => {\n    const { trackInfo } = this.props; // acessando trackInfo da props\n    const addRemove = favSong ? removeSong : addSong; // caso haja parametro, remova musica\n    this.setState({ loading: true }); // carregar pagina\n    await addRemove(trackInfo); // remove info da musica anteriormente passada\n    this.setState({ loading: false, favSong: !favSong }); // ao final pare de carregar e favSong fica vazia\n  };\n\n  render() {\n    const { trackInfo: { trackId } } = this.props; // acessando trackId\n    const { favSong, loading } = this.state; // acessando as keys do state\n    return (\n      loading ? <h3>Carregando...</h3> : (\n        <label\n          htmlFor={ trackId }\n        >\n          Favorita\n          <input\n            data-testid={ `checkbox-music-${trackId}` }\n            type=\"checkbox\"\n            name=\"favSong\"\n            id={ trackId }\n            checked={ favSong }\n            onChange={ () => this.validateFav(favSong) }\n          />\n        </label>));\n  }\n}\n\nFavoriteSongs.propTypes = {\n  trackInfo: PropTypes.shape({\n    trackId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired, // tipo string e number\n  }).isRequired,\n};\n\nexport default FavoriteSongs;\n// finish\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,8BAA8B;AAAC;AAErF,MAAMC,aAAa,SAASL,KAAK,CAACM,SAAS,CAAC;EAAA;IAAA;IAAA,KAC1CC,KAAK,GAAG;MACNC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE;IACX,CAAC;IAAA,KAQDC,SAAS,GAAG,YAAY;MACtB,MAAM;QAAEC,SAAS,EAAE;UAAEC;QAAQ;MAAE,CAAC,GAAG,IAAI,CAACC,KAAK,CAAC,CAAC;MAC/C,MAAMC,MAAM,GAAG,MAAMX,gBAAgB,EAAE,CAAC,CAAC;MACzC,MAAMK,OAAO,GAAGM,MAAM,GAAGA,MAAM,CAAC;MAAA,CAC7BC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACJ,OAAO,KAAKA,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC;MACrD,IAAI,CAACK,QAAQ,CAAC;QAAET;MAAQ,CAAC,CAAC,CAAC,CAAC;MAC5B,OAAOA,OAAO;IAChB,CAAC;IAAA,KAEDU,WAAW,GAAG,MAAOV,OAAO,IAAK;MAC/B,MAAM;QAAEG;MAAU,CAAC,GAAG,IAAI,CAACE,KAAK,CAAC,CAAC;MAClC,MAAMM,SAAS,GAAGX,OAAO,GAAGJ,UAAU,GAAGF,OAAO,CAAC,CAAC;MAClD,IAAI,CAACe,QAAQ,CAAC;QAAER,OAAO,EAAE;MAAK,CAAC,CAAC,CAAC,CAAC;MAClC,MAAMU,SAAS,CAACR,SAAS,CAAC,CAAC,CAAC;MAC5B,IAAI,CAACM,QAAQ,CAAC;QAAER,OAAO,EAAE,KAAK;QAAED,OAAO,EAAE,CAACA;MAAQ,CAAC,CAAC,CAAC,CAAC;IACxD,CAAC;EAAA;EArBDY,iBAAiB,GAAG;IAAE;IACpB,IAAI,CAACV,SAAS,EAAE;EAClB;;EAEA;EACA;;EAkBAW,MAAM,GAAG;IACP,MAAM;MAAEV,SAAS,EAAE;QAAEC;MAAQ;IAAE,CAAC,GAAG,IAAI,CAACC,KAAK,CAAC,CAAC;IAC/C,MAAM;MAAEL,OAAO;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACF,KAAK,CAAC,CAAC;IACzC,OACEE,OAAO,gBAAG;MAAA,UAAI;IAAa;MAAA;MAAA;MAAA;IAAA,QAAK,gBAC9B;MACE,OAAO,EAAGG,OAAS;MAAA,WACpB,UAEC;QACE,eAAe,kBAAiBA,OAAQ,EAAG;QAC3C,IAAI,EAAC,UAAU;QACf,IAAI,EAAC,SAAS;QACd,EAAE,EAAGA,OAAS;QACd,OAAO,EAAGJ,OAAS;QACnB,QAAQ,EAAG,MAAM,IAAI,CAACU,WAAW,CAACV,OAAO;MAAG;QAAA;QAAA;QAAA;MAAA,QAC5C;IAAA;MAAA;MAAA;MAAA;IAAA,QACK;EACf;AACF;AAEAH,aAAa,CAACiB,SAAS,GAAG;EACxBX,SAAS,EAAEV,SAAS,CAACsB,KAAK,CAAC;IACzBX,OAAO,EAAEX,SAAS,CAACuB,SAAS,CAAC,CAACvB,SAAS,CAACwB,MAAM,EAAExB,SAAS,CAACyB,MAAM,CAAC,CAAC,CAACC,UAAU,CAAE;EACjF,CAAC,CAAC,CAACA;AACL,CAAC;AAED,eAAetB,aAAa;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}