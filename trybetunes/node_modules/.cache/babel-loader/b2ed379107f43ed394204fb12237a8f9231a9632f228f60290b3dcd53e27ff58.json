{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documentos/albernazandre.github.io/sd-028-a-project-trybetunes/src/pages/Album.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Album extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      collection: '',\n      artist: '',\n      musics: []\n    };\n    this.fetchTrack = async () => {\n      // requisicao na API\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props; // acessando o id dentro da props da API\n      const getMusicsAPI = await getMusics(id); // capturando a funcao que procura as musicas baseado no parametro id que é o artista ou banda dentro da base de dados\n      const arrMusic = getMusicsAPI.reduce((plusMusic, music) => {\n        // acumulando as musicas e informações\n        const {\n          trackName,\n          previewUrl,\n          trackId,\n          collectionName,\n          kind\n        } = music;\n        if (kind === 'song') {\n          // se o tipo for 'musica' o acumulador puxa os valores\n          plusMusic.push({\n            trackName,\n            collectionName,\n            previewUrl,\n            trackId\n          });\n        }\n        return plusMusic;\n      }, []); // valor inicial é array vazio\n      const collection = getMusicsAPI[0]; // o album recebe o primeiro valor da API\n      const {\n        artistName,\n        collectionName\n      } = collection; // o album captura nome do artista e do album\n\n      this.setState({\n        // sete os valores para keys do state\n        collection: collectionName,\n        artist: artistName,\n        musics: arrMusic\n      });\n    };\n  }\n  componentDidMount() {\n    // faz com que a funcao seja rodada apos o render\n    this.fetchTrack();\n  }\n  render() {\n    const {\n      collection,\n      artist,\n      musics\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"page-album\",\n        children: \" Voc\\xEA est\\xE1 em Album\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          \"data-testid\": \"artist-name\",\n          children: artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          \"data-testid\": \"album-name\",\n          children: collection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: musics.map(_ref => {\n          let {\n            trackId,\n            trackName,\n            previewUrl\n          } = _ref;\n          return (\n            /*#__PURE__*/\n            // criando o array de cards de musica com as informações da musica\n            _jsxDEV(MusicCard, {\n              trackId: trackId,\n              artist: artist,\n              trackName: trackName,\n              previewUrl: previewUrl\n            }, trackId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 13\n            }, this)\n          );\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n}\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  }).isRequired\n};\nexport default Album;","map":{"version":3,"names":["React","PropTypes","Header","MusicCard","getMusics","Album","Component","state","collection","artist","musics","fetchTrack","match","params","id","props","getMusicsAPI","arrMusic","reduce","plusMusic","music","trackName","previewUrl","trackId","collectionName","kind","push","artistName","setState","componentDidMount","render","map","propTypes","shape","string","isRequired"],"sources":["/home/andre/Documentos/albernazandre.github.io/sd-028-a-project-trybetunes/src/pages/Album.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\n\nclass Album extends React.Component {\n  state = {\n    collection: '',\n    artist: '',\n    musics: [],\n  };\n\n  componentDidMount() { // faz com que a funcao seja rodada apos o render\n    this.fetchTrack();\n  }\n\n  fetchTrack = async () => { // requisicao na API\n    const { match: { params: { id } } } = this.props;// acessando o id dentro da props da API\n    const getMusicsAPI = await getMusics(id); // capturando a funcao que procura as musicas baseado no parametro id que é o artista ou banda dentro da base de dados\n    const arrMusic = getMusicsAPI.reduce((plusMusic, music) => { // acumulando as musicas e informações\n      const { trackName, previewUrl, trackId, collectionName, kind } = music;\n\n      if (kind === 'song') { // se o tipo for 'musica' o acumulador puxa os valores\n        plusMusic.push({ trackName, collectionName, previewUrl, trackId });\n      }\n      return plusMusic;\n    }, []); // valor inicial é array vazio\n    const collection = getMusicsAPI[0]; // o album recebe o primeiro valor da API\n    const { artistName, collectionName } = collection; // o album captura nome do artista e do album\n\n    this.setState({ // sete os valores para keys do state\n      collection: collectionName,\n      artist: artistName,\n      musics: arrMusic,\n    });\n  };\n\n  render() {\n    const { collection, artist, musics } = this.state;\n\n    return (\n      <div>\n        <Header />\n        <div data-testid=\"page-album\"> Você está em Album</div>\n        <div>\n          <span data-testid=\"artist-name\">{ artist }</span>\n          <span data-testid=\"album-name\">{ collection }</span>\n        </div>\n        <span>\n          {musics.map(({ trackId, trackName, previewUrl }) => ( // criando o array de cards de musica com as informações da musica\n            <MusicCard\n              key={ trackId }\n              trackId={ trackId }\n              artist={ artist }\n              trackName={ trackName }\n              previewUrl={ previewUrl }\n            />))}\n\n        </span>\n\n      </div>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({ id: PropTypes.string }),\n  }).isRequired,\n};\n\nexport default Album;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}