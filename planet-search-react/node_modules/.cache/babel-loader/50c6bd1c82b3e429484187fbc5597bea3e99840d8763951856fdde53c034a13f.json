{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documentos/albernazandre.github.io/sd-028-a-project-starwars-planets-search/src/components/Filter.jsx\",\n  _s = $RefreshSig$();\n// componente que cria botao de excluir todos ou alguns filtros e retornar o que era antes\n\nimport { useContext } from 'react';\nimport { contextApp } from '../context/ContextApp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Filters() {\n  _s();\n  const {\n    filters,\n    setFilters,\n    setFilteredPlanet,\n    planetData\n  } = useContext(contextApp);\n  const handleClick = filtered => {\n    const freshFilters = filters.filter(noMoreFilter => noMoreFilter !== filtered);\n    if (freshFilters.length > 0) {\n      setFilters(freshFilters);\n      const filterData = planetData.filter(planet => freshFilters.some(_ref => {\n        let {\n          valueColumn,\n          valueOperator,\n          valueInput\n        } = _ref;\n        if (planet[valueColumn] !== 'unknown') {\n          switch (valueOperator) {\n            case 'maior que':\n              return planet[valueColumn] > valueInput;\n            case 'menor que':\n              return planet[valueColumn] < valueInput;\n            case 'igual a':\n              return planet[valueColumn] === valueInput;\n            default:\n              return true;\n          }\n        } else {\n          return true;\n        }\n      }));\n      setFilteredPlanet(filterData);\n    } else {\n      setFilteredPlanet(planetData);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: filters.map(f => /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"filter\",\n      children: [`${f.columnValue} ${f.valueOperator} ${f.inputValue}`, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick(f),\n        children: \"Exclude\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)]\n    }, f.columnValue, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(Filters, \"Spt/7csoDBcDZ7OCZJO1uhnn1FU=\");\n_c = Filters;\nvar _c;\n$RefreshReg$(_c, \"Filters\");","map":{"version":3,"names":["useContext","contextApp","Filters","filters","setFilters","setFilteredPlanet","planetData","handleClick","filtered","freshFilters","filter","noMoreFilter","length","filterData","planet","some","valueColumn","valueOperator","valueInput","map","f","columnValue","inputValue"],"sources":["/home/andre/Documentos/albernazandre.github.io/sd-028-a-project-starwars-planets-search/src/components/Filter.jsx"],"sourcesContent":["// componente que cria botao de excluir todos ou alguns filtros e retornar o que era antes\n\nimport { useContext } from 'react';\nimport { contextApp } from '../context/ContextApp';\n\nexport default function Filters() {\n  const { filters, setFilters,\n    setFilteredPlanet, planetData } = useContext(contextApp);\n\n  const handleClick = (filtered) => {\n    const freshFilters = filters.filter((noMoreFilter) => noMoreFilter !== filtered);\n    if (freshFilters.length > 0) {\n      setFilters(freshFilters);\n      const filterData = planetData.filter((planet) => freshFilters\n        .some(({ valueColumn, valueOperator, valueInput }) => {\n          if (planet[valueColumn] !== 'unknown') {\n            switch (valueOperator) {\n            case 'maior que':\n              return planet[valueColumn] > valueInput;\n            case 'menor que':\n              return planet[valueColumn] < valueInput;\n            case 'igual a':\n              return planet[valueColumn] === valueInput;\n            default:\n              return true;\n            }\n          } else {\n            return true;\n          }\n        }));\n      setFilteredPlanet(filterData);\n    } else {\n      setFilteredPlanet(planetData);\n    }\n  };\n  return (\n    <div>\n      {filters.map((f) => (\n        <div key={ f.columnValue } data-testid=\"filter\">\n          { `${f.columnValue} ${f.valueOperator} ${f.inputValue}` }\n          <button onClick={ () => handleClick(f) }>Exclude</button>\n        </div>\n      ))}\n    </div>\n  );\n}\n"],"mappings":";;AAAA;;AAEA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,UAAU,QAAQ,uBAAuB;AAAC;AAEnD,eAAe,SAASC,OAAO,GAAG;EAAA;EAChC,MAAM;IAAEC,OAAO;IAAEC,UAAU;IACzBC,iBAAiB;IAAEC;EAAW,CAAC,GAAGN,UAAU,CAACC,UAAU,CAAC;EAE1D,MAAMM,WAAW,GAAIC,QAAQ,IAAK;IAChC,MAAMC,YAAY,GAAGN,OAAO,CAACO,MAAM,CAAEC,YAAY,IAAKA,YAAY,KAAKH,QAAQ,CAAC;IAChF,IAAIC,YAAY,CAACG,MAAM,GAAG,CAAC,EAAE;MAC3BR,UAAU,CAACK,YAAY,CAAC;MACxB,MAAMI,UAAU,GAAGP,UAAU,CAACI,MAAM,CAAEI,MAAM,IAAKL,YAAY,CAC1DM,IAAI,CAAC,QAAgD;QAAA,IAA/C;UAAEC,WAAW;UAAEC,aAAa;UAAEC;QAAW,CAAC;QAC/C,IAAIJ,MAAM,CAACE,WAAW,CAAC,KAAK,SAAS,EAAE;UACrC,QAAQC,aAAa;YACrB,KAAK,WAAW;cACd,OAAOH,MAAM,CAACE,WAAW,CAAC,GAAGE,UAAU;YACzC,KAAK,WAAW;cACd,OAAOJ,MAAM,CAACE,WAAW,CAAC,GAAGE,UAAU;YACzC,KAAK,SAAS;cACZ,OAAOJ,MAAM,CAACE,WAAW,CAAC,KAAKE,UAAU;YAC3C;cACE,OAAO,IAAI;UAAC;QAEhB,CAAC,MAAM;UACL,OAAO,IAAI;QACb;MACF,CAAC,CAAC,CAAC;MACLb,iBAAiB,CAACQ,UAAU,CAAC;IAC/B,CAAC,MAAM;MACLR,iBAAiB,CAACC,UAAU,CAAC;IAC/B;EACF,CAAC;EACD,oBACE;IAAA,UACGH,OAAO,CAACgB,GAAG,CAAEC,CAAC,iBACb;MAA2B,eAAY,QAAQ;MAAA,WAC1C,GAAEA,CAAC,CAACC,WAAY,IAAGD,CAAC,CAACH,aAAc,IAAGG,CAAC,CAACE,UAAW,EAAC,eACvD;QAAQ,OAAO,EAAG,MAAMf,WAAW,CAACa,CAAC,CAAG;QAAA,UAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA,GAFhDA,CAAC,CAACC,WAAW;MAAA;MAAA;MAAA;IAAA,QAIzB;EAAC;IAAA;IAAA;IAAA;EAAA,QACE;AAEV;AAAC,GAxCuBnB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}