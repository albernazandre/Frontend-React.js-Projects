{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documentos/albernazandre.github.io/sd-028-a-project-starwars-planets-search/src/context/ContextApp.jsx\",\n  _s = $RefreshSig$();\n// A funcionalidade do createContext está em passar dados de\n// componentes pais para componentes filhos de forma direta,\n// sem precisar fazer isso em cascata, do avô pro pai e depois\n// do pai pro filho. Com o context você consegue passar diretamente\n// do componente avô, ou tataravô e etc, pro filho.\nimport { createContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport fetchPlanets from '../services/FetchPlanets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const contextApp = /*#__PURE__*/createContext();\n\n// A funcao PlanetProvider irá prover os componentes filhos\n// com os dados recebidos da requisicao da API\nexport function PlanetProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  // planetData ira receber os dados da API externa\n  // e para isso a funcao setPlanetData irá agir\n  // recebendo como parametro os dados da API\n  const [planetData, setPlanetData] = useState([]);\n  // useState para filtragem de planetas do Form\n  const [filteredPlanet, setFilteredPlanet] = useState([]);\n\n  // Estamos passando os dados do fetch da API para a funcao\n  // do useState: setPlanetData\n  useEffect(() => {\n    const fetchPlanetsData = async () => {\n      const dataFinal = await fetchPlanets();\n      setPlanetData(dataFinal);\n    };\n    fetchPlanetsData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(contextApp.Provider, {\n    value: {\n      planetData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(PlanetProvider, \"kkoRW+p43TzI6X+NOFNyFGBbBDk=\");\n_c = PlanetProvider;\nPlanetProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nvar _c;\n$RefreshReg$(_c, \"PlanetProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","PropTypes","fetchPlanets","contextApp","PlanetProvider","children","planetData","setPlanetData","filteredPlanet","setFilteredPlanet","fetchPlanetsData","dataFinal","propTypes","node","isRequired"],"sources":["/home/andre/Documentos/albernazandre.github.io/sd-028-a-project-starwars-planets-search/src/context/ContextApp.jsx"],"sourcesContent":["// A funcionalidade do createContext está em passar dados de\n// componentes pais para componentes filhos de forma direta,\n// sem precisar fazer isso em cascata, do avô pro pai e depois\n// do pai pro filho. Com o context você consegue passar diretamente\n// do componente avô, ou tataravô e etc, pro filho.\nimport { createContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport fetchPlanets from '../services/FetchPlanets';\n\nexport const contextApp = createContext();\n\n// A funcao PlanetProvider irá prover os componentes filhos\n// com os dados recebidos da requisicao da API\nexport function PlanetProvider({ children }) {\n  // planetData ira receber os dados da API externa\n  // e para isso a funcao setPlanetData irá agir\n  // recebendo como parametro os dados da API\n  const [planetData, setPlanetData] = useState([]);\n  // useState para filtragem de planetas do Form\n  const [filteredPlanet, setFilteredPlanet] = useState([]);\n\n  // Estamos passando os dados do fetch da API para a funcao\n  // do useState: setPlanetData\n  useEffect(() => {\n    const fetchPlanetsData = async () => {\n      const dataFinal = await fetchPlanets();\n      setPlanetData(dataFinal);\n    };\n    fetchPlanetsData();\n  }, []);\n\n  return (\n    <contextApp.Provider value={ { planetData } }>\n      {children}\n    </contextApp.Provider>\n  );\n}\n\nPlanetProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,YAAY,MAAM,0BAA0B;AAAC;AAEpD,OAAO,MAAMC,UAAU,gBAAGL,aAAa,EAAE;;AAEzC;AACA;AACA,OAAO,SAASM,cAAc,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EACzC;EACA;EACA;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA;EACAC,SAAS,CAAC,MAAM;IACd,MAAMU,gBAAgB,GAAG,YAAY;MACnC,MAAMC,SAAS,GAAG,MAAMT,YAAY,EAAE;MACtCK,aAAa,CAACI,SAAS,CAAC;IAC1B,CAAC;IACDD,gBAAgB,EAAE;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE,QAAC,UAAU,CAAC,QAAQ;IAAC,KAAK,EAAG;MAAEJ;IAAW,CAAG;IAAA,UAC1CD;EAAQ;IAAA;IAAA;IAAA;EAAA,QACW;AAE1B;AAAC,GAvBeD,cAAc;AAAA,KAAdA,cAAc;AAyB9BA,cAAc,CAACQ,SAAS,GAAG;EACzBP,QAAQ,EAAEJ,SAAS,CAACY,IAAI,CAACC;AAC3B,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}